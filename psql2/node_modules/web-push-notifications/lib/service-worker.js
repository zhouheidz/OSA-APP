'use strict';

var _storage = require('./utils/storage'),
    _constants = require('./constants'),
    _Logger = require('./classes/Logger'),
    _Logger2 = _interopRequireDefault(_Logger),
    _API = require('./classes/API'),
    _API2 = _interopRequireDefault(_API),
    _functions = require('./utils/functions'),
    _createDoApiFetch = require('./utils/createDoApiFetch'),
    _createDoApiFetch2 = _interopRequireDefault(_createDoApiFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WorkerRunner = function () {
  function WorkerRunner() {
    _classCallCheck(this, WorkerRunner);

    this.logger = new _Logger2.default('debug');
  }

  WorkerRunner.prototype.getApplicationCode = function getApplicationCode() {
    return _storage.keyValue.get(_constants.keyApplicationCode).then(function (code) {
      if (!code) {
        throw new Error('no code');
      }
      return code;
    });
  };

  WorkerRunner.prototype.initApi = function initApi(reinit) {
    var _this = this;

    if (this.api && !reinit) {
      return Promise.resolve();
    }
    return Promise.all([self.registration.pushManager.getSubscription(), this.getApplicationCode(), _storage.keyValue.get(_constants.keyLanguage)]).then(function (_ref) {
      var subscription = _ref[0],
          applicationCode = _ref[1],
          lang = _ref[2];

      _this.api = _API2.default.create(subscription, applicationCode, (0, _createDoApiFetch2.default)((0, _functions.getPushwooshUrl)(applicationCode), _this.logger), lang);
    });
  };

  WorkerRunner.prototype.showMessage = function showMessage(message, pTitle, pImage, pUrl, pHash) {
    this.logger.info('showMessage', message, pTitle, pImage, pUrl, pHash);

    return Promise.all([_storage.keyValue.get(_constants.keyDefaultNotificationTitle), _storage.keyValue.get(_constants.keyDefaultNotificationImage), _storage.keyValue.get(_constants.keyDefaultNotificationUrl)]).then(function (_ref2) {
      var defaultTitle = _ref2[0],
          defaultImage = _ref2[1],
          defaultUrl = _ref2[2],
          title = pTitle || defaultTitle || _constants.defaultNotificationTitle,
          icon = pImage || defaultImage || _constants.defaultNotificationImage,
          url = pUrl || defaultUrl || _constants.defaultNotificationUrl;


      return self.registration.showNotification(title, {
        body: message,
        icon: icon,
        tag: JSON.stringify({
          url: url,
          messageHash: pHash
        })
      });
    });
  };

  WorkerRunner.prototype.showOldMessage = function showOldMessage() {
    var _this2 = this;

    this.logger.info('showOldMessage');

    this.initApi().then(function () {
      return _this2.api.callAPI('getLastMessage', { device_type: (0, _functions.getBrowserType)() }).then(function (_ref3) {
        var notification = _ref3.notification;

        _this2.logger.info('getLastMessage', notification);
        return _this2.showMessage(notification.content, notification.chromeTitle, notification.chromeIcon, notification.url, notification.messageHash);
      });
    });
  };

  WorkerRunner.prototype.showPayloadMessage = function showPayloadMessage(data) {
    var _this3 = this;

    return Promise.resolve().then(function () {
      var payload = data.json();
      _this3.logger.info('payload', payload);
      return _this3.showMessage(payload.body, payload.header, payload.i, payload.l, payload.p);
    });
  };

  WorkerRunner.prototype.push = function push(event) {
    this.logger.info('onPush', event);
    event.waitUntil(event.data ? this.showPayloadMessage(event.data) : this.showOldMessage());
  };

  WorkerRunner.prototype.sendPushStat = function sendPushStat(hash) {
    var _this4 = this;

    this.logger.debug('sendPushStat', hash);
    return this.initApi().then(function () {
      return _this4.api.pushStat(hash).catch(function (err) {
        return _this4.logger.error('send push stat error', err);
      });
    });
  };

  WorkerRunner.prototype.click = function click(event) {
    this.logger.info('onClick', event);
    var tag = event.notification.tag;

    tag = JSON.parse(tag);
    event.waitUntil(Promise.all([this.sendPushStat(tag.messageHash), clients.openWindow(tag.url).then(function () {
      return event.notification.close();
    }) // eslint-disable-line no-undef
    ]));
  };

  WorkerRunner.prototype.install = function install(event) {
    this.logger.info('onInstall', event);
    event.waitUntil(_storage.keyValue.set(_constants.keyWorkerSDKVersion, (0, _functions.getVersion)()).then(function () {
      return self.skipWaiting();
    }));
  };

  WorkerRunner.prototype.activate = function activate(event) {
    this.logger.info('onActivate', event);
    return event.waitUntil(caches.keys().then(function (cacheNames) {
      return Promise.all(cacheNames.map(function (cacheName) {
        return caches.delete(cacheName);
      }));
    }).then(self.clients.claim()));
  };

  WorkerRunner.prototype.subscriptionChange = function subscriptionChange(event) {
    var _this5 = this;

    this.logger.info('onPushSubscriptionChange', event);
    event.waitUntil(self.registration.pushManager.subscribe({ userVisibleOnly: true }).then(function () {
      return _this5.initApi(true).then(function () {
        return _this5.api.registerDevice().then(function () {
          return _this5.logger.info('Re-register done.');
        });
      });
    }));
  };

  return WorkerRunner;
}();

var runner = new WorkerRunner();

self.addEventListener('push', function (event) {
  return runner.push(event);
});
self.addEventListener('notificationclick', function (event) {
  return runner.click(event);
});
self.addEventListener('install', function (event) {
  return runner.install(event);
});
self.addEventListener('activate', function (event) {
  return runner.activate(event);
});
self.addEventListener('pushsubscriptionchange', function (event) {
  return runner.subscriptionChange(event);
});

self.Pushwoosh = runner;