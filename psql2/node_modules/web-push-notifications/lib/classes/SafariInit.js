'use strict';

exports.__esModule = true;

var _BaseInit2 = require('./BaseInit'),
    _BaseInit3 = _interopRequireDefault(_BaseInit2),
    _createDoApiXHR = require('../utils/createDoApiXHR'),
    _createDoApiXHR2 = _interopRequireDefault(_createDoApiXHR),
    _API = require('./API'),
    _API2 = _interopRequireDefault(_API),
    _PushwooshError = require('./PushwooshError'),
    _PushwooshError2 = _interopRequireDefault(_PushwooshError),
    _functions = require('../utils/functions'),
    _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PushwooshSafari = function (_BaseInit) {
  _inherits(PushwooshSafari, _BaseInit);

  function PushwooshSafari() {
    _classCallCheck(this, PushwooshSafari);

    return _possibleConstructorReturn(this, _BaseInit.apply(this, arguments));
  }

  PushwooshSafari.prototype.getPermission = function getPermission() {
    return window.safari.pushNotification.permission(this.webSitePushID);
  };

  PushwooshSafari.prototype.initSubscribe = function initSubscribe() {
    var _this2 = this;

    setTimeout(function () {
      return _this2.checkRemotePermission(_this2.getPermission());
    }, 0);
    return new Promise(function (resolve, reject) {
      _this2.ee.once('success', function () {
        resolve(_this2.api);
      });
      _this2.ee.once('failure', reject);
    });
  };

  PushwooshSafari.prototype.unsubscribe = function unsubscribe() {
    return this.initApi().then(function (api) {
      return api.unregisterDevice();
    });
  };

  PushwooshSafari.prototype.initApi = function initApi() {
    var _this3 = this;

    return Promise.resolve().then(function () {
      var permissionData = _this3.getPermission();
      if (permissionData.permission === 'denied') {
        var err = new _PushwooshError2.default('The user said no.', _PushwooshError2.default.codes.userDenied);
        _this3.logger.error(err);
        throw err;
      }
      if (!permissionData.deviceToken) {
        throw new _PushwooshError2.default('permissionData.deviceToken is empty');
      }
      var hwid = permissionData.deviceToken.toLowerCase();
      _this3.api = new _API2.default({
        doPushwooshApiMethod: (0, _createDoApiXHR2.default)(_this3.pushwooshUrl, _this3.logger),
        applicationCode: _this3.applicationCode,
        hwid: hwid,
        pushToken: hwid.toUpperCase()
      });
      _this3.sendPushStat();
      return _this3.api;
    });
  };

  PushwooshSafari.prototype.checkRemotePermission = function checkRemotePermission(permissionData) {
    var _this4 = this;

    this.logger.debug('permissionData', permissionData);

    if (permissionData.permission === 'default') {
      this.logger.debug('This is a new web service URL and its validity is unknown.');
      window.safari.pushNotification.requestPermission(this.pushwooshUrl + 'safari', this.webSitePushID, { application: this.applicationCode }, function (perm) {
        return _this4.checkRemotePermission(perm);
      });
    } else if (permissionData.permission === 'denied') {
      var err = new _PushwooshError2.default('The user said no.', _PushwooshError2.default.codes.userDenied);
      this.logger.error(err);
      this.ee.emit('failure', err);
    } else if (permissionData.permission === 'granted') {
      this.logger.debug('The web service URL is a valid push provider, and the user said yes.');
      this.initApi().then(function () {
        return _this4.setDefaultTags();
      }).then(function () {
        return _this4.ee.emit('success');
      });
    }
  };

  PushwooshSafari.prototype.setDefaultTags = function setDefaultTags() {
    var _this5 = this;

    return Promise.resolve().then(function () {
      // eslint-disable-line consistent-return
      if (localStorage.getItem(_constants.keyTagsWasSetted) !== 'true') {
        localStorage.setItem(_constants.keyTagsWasSetted, 'true');
        return _this5.api.setTags({
          // eslint-disable-next-line quote-props
          'Language': navigator.language || 'en',
          'Device Model': (0, _functions.getBrowserVersion)(),
          'Device Name': (0, _functions.getDeviceName)()
        });
      }
    });
  };

  PushwooshSafari.prototype.sendPushStat = function sendPushStat() {
    var _this6 = this;

    try {
      var hashReg = /#P(.*)/,
          hash = decodeURIComponent(document.location.hash);


      if (hashReg.test(hash)) {
        this.api.pushStat(hashReg.exec(hash)[1]).then(function () {
          return _this6.logger.debug('Push stat sent successfully');
        });
      }
    } catch (e) {
      this.logger.info('error send push stat: ' + e);
    }
  };

  return PushwooshSafari;
}(_BaseInit3.default);

exports.default = PushwooshSafari;