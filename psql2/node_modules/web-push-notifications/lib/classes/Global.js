'use strict';

exports.__esModule = true;

var _storage = require('../utils/storage'),
    _functions = require('../utils/functions'),
    _Logger = require('./Logger'),
    _Logger2 = _interopRequireDefault(_Logger),
    _SafariInit = require('./SafariInit'),
    _SafariInit2 = _interopRequireDefault(_SafariInit),
    _WorkerInit = require('./WorkerInit'),
    _WorkerInit2 = _interopRequireDefault(_WorkerInit),
    _API = require('./API'),
    _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var isSafari = (0, _functions.isSafariBrowser)(),
    canUseSW = (0, _functions.canUseServiceWorkers)();


function findHeader(headers, fh) {
  var val = '';
  for (var _iterator = headers.entries(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var h = _ref;

    if (h[0].toLowerCase() === fh) {
      val = h[1];
    }
  }
  return val;
}

var PushwooshGlobal = function () {
  function PushwooshGlobal() {
    _classCallCheck(this, PushwooshGlobal);

    this._commands = [];
    this._keyValue = _storage.keyValue;
  }

  PushwooshGlobal.prototype._init = function _init() {
    var _this = this,
        initPromise = this._auto ? this._initer.initSubscribe() : this._initer.initApi();

    this._initPromise = initPromise.catch(function (err) {
      _this._logger.debug('Error was caught in browser init', err);
      return (0, _API.createErrorAPI)(err);
    }).then(function (api) {
      return _this.api = api;
    }) // eslint-disable-line no-return-assign
    .then(function () {
      // eslint-disable-line consistent-return
      var lastSentTime = Number(localStorage.getItem(_constants.keyLastSentAppOpen)),
          curTime = Date.now();

      if (curTime - lastSentTime > 3600000) {
        localStorage.setItem(_constants.keyLastSentAppOpen, curTime);
        return _this.api.applicationOpen().then(function () {
          return _this._logger.debug('applicationOpen sent successfully');
        }, function (err) {
          return _this._logger.debug('applicationOpen sent with error', err);
        });
      }
    }).then(function () {
      return _this._commands.forEach(function (cmd) {
        return _this._runCmd(cmd);
      });
    });
  };

  PushwooshGlobal.prototype.init = function init(params) {
    var applicationCode = params.applicationCode,
        safariWebsitePushID = params.safariWebsitePushID,
        _params$serviceWorker = params.serviceWorkerUrl,
        serviceWorkerUrl = _params$serviceWorker === undefined ? _constants.defaultWorkerUrl : _params$serviceWorker,
        _params$serviceWorker2 = params.serviceWorkerSecondUrl,
        serviceWorkerSecondUrl = _params$serviceWorker2 === undefined ? _constants.defaultWorkerSecondUrl : _params$serviceWorker2,
        logLevel = params.logLevel,
        _params$pushwooshUrl = params.pushwooshUrl,
        pushwooshUrl = _params$pushwooshUrl === undefined ? (0, _functions.getPushwooshUrl)(applicationCode) : _params$pushwooshUrl,
        defaultNotificationTitle = params.defaultNotificationTitle,
        defaultNotificationImage = params.defaultNotificationImage,
        defaultNotificationUrl = params.defaultNotificationUrl,
        _params$autoSubscribe = params.autoSubscribe,
        autoSubscribe = _params$autoSubscribe === undefined ? true : _params$autoSubscribe;

    this._initParams = params;
    this._auto = autoSubscribe;
    this._logger = new _Logger2.default(logLevel);
    if (!(isSafari && (0, _functions.getDeviceName)() === 'PC' || canUseSW)) {
      this._logger.info('This browser does not support pushes');
      return;
    }
    if (!applicationCode) {
      throw new Error('no application code');
    }

    if (isSafari) {
      if (safariWebsitePushID) {
        this._initer = new _SafariInit2.default({
          webSitePushID: safariWebsitePushID,
          pushwooshUrl: pushwooshUrl,
          applicationCode: applicationCode,
          logger: this._logger
        });
      }
    } else if (canUseSW) {
      if (serviceWorkerUrl) {
        this._initer = new _WorkerInit2.default({
          workerUrl: serviceWorkerUrl,
          workerSecondUrl: serviceWorkerSecondUrl,
          pushwooshUrl: pushwooshUrl,
          applicationCode: applicationCode,
          defaultNotificationTitle: defaultNotificationTitle,
          defaultNotificationImage: defaultNotificationImage,
          defaultNotificationUrl: defaultNotificationUrl,
          logger: this._logger
        });
      }
    }
    if (this._initer) {
      this._init();
    } else {
      this._logger.info('Browser has not been configured');
    }
  };

  PushwooshGlobal.prototype._runCmd = function _runCmd(func) {
    return this._initPromise.then(func);
  };

  PushwooshGlobal.prototype._cmdInit = function _cmdInit(params) {
    var _this2 = this;

    if (document.readyState === 'complete') {
      this.init(params);
    } else {
      window.addEventListener('load', function () {
        return _this2.init(params);
      });
    }
  };

  PushwooshGlobal.prototype._runOrPush = function _runOrPush(clb) {
    if (this._initPromise) {
      this._runCmd(clb);
    } else {
      this._commands.push(clb);
    }
  };

  PushwooshGlobal.prototype.push = function push(cmd) {
    var _this3 = this;

    if (typeof cmd === 'function') {
      this._runOrPush(function () {
        return cmd(_this3.api);
      });
    } else if (Array.isArray(cmd)) {
      switch (cmd[0]) {
        case 'init':
          this._cmdInit(cmd[1]);
          break;
        case 'subscribe':
          this._runOrPush(function () {
            cmd[1](_this3._initer.initSubscribe());
          });
          break;
        case 'unsubscribe':
          this._runOrPush(function () {
            cmd[1](_this3._initer.unsubscribe());
          });
          break;
        default:
          throw new Error('unknown command');
      }
    } else {
      throw new Error('invalid command');
    }
  };

  PushwooshGlobal.prototype._debug = function _debug() {
    var debugFn = console.info.bind(console),
        initerParams = this._initer._params,
        jsContentType = 'application/javascript',
        checkUrlFn = function checkUrlFn(text, url, type) {
      fetch(url).then(function (resp) {
        if (resp.status === 200) {
          var contentType = findHeader(resp.headers, 'content-type');
          debugFn(text, contentType.indexOf(type) > -1 ? 'url ' + url + ' is ok' : 'url ' + url + ' has WRONG Content-Type \'' + contentType + '\'');
        } else {
          debugFn(text, 'error: url ' + url + ' loaded with status ' + resp.status);
        }
      }).catch(function (e) {
        return debugFn(text, e);
      });
    }; // eslint-disable-line
    // eslint-disable-line

    debugFn('version', (0, _functions.getVersion)());
    debugFn('initer params', initerParams);
    checkUrlFn('workerUrl', '' + location.origin + initerParams.workerUrl, jsContentType);
    checkUrlFn('workerSecondUrl', '' + location.origin + initerParams.workerSecondUrl, jsContentType);
    var links = document.getElementsByTagName('link');
    for (var i = 0; i < links.length; ++i) {
      if (links[i].rel === 'manifest') {
        checkUrlFn('manifest', links[i].href, 'application/json');
      }
    }
    this._keyValue.getAll().then(function (res) {
      return debugFn('keyValues', res);
    });
  };

  return PushwooshGlobal;
}();

exports.default = PushwooshGlobal;