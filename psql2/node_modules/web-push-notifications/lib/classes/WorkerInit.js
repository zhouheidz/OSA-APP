'use strict';

exports.__esModule = true;

var _storage = require('../utils/storage'),
    _BaseInit2 = require('./BaseInit'),
    _BaseInit3 = _interopRequireDefault(_BaseInit2),
    _createDoApiXHR = require('../utils/createDoApiXHR'),
    _createDoApiXHR2 = _interopRequireDefault(_createDoApiXHR),
    _API = require('./API'),
    _API2 = _interopRequireDefault(_API),
    _PushwooshError = require('./PushwooshError'),
    _PushwooshError2 = _interopRequireDefault(_PushwooshError),
    _functions = require('../utils/functions'),
    _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PushwooshWorker = function (_BaseInit) {
  _inherits(PushwooshWorker, _BaseInit);

  function PushwooshWorker() {
    _classCallCheck(this, PushwooshWorker);

    return _possibleConstructorReturn(this, _BaseInit.apply(this, arguments));
  }

  PushwooshWorker.prototype.initSubscribe = function initSubscribe() {
    var _this2 = this;

    return navigator.serviceWorker.getRegistration().then(function (serviceWorkerRegistration) {
      _this2.logger.debug('sw', serviceWorkerRegistration);
      if (!serviceWorkerRegistration || serviceWorkerRegistration.installing == null) {
        return _this2.registerSW();
      }
      return serviceWorkerRegistration;
    }).then(function (serviceWorkerRegistration) {
      return _this2.subscribeForPushes(serviceWorkerRegistration);
    }).then(function () {
      return _this2.api;
    });
  };

  PushwooshWorker.prototype.unsubscribe = function unsubscribe() {
    return Promise.all([this.initApi(), navigator.serviceWorker.getRegistration().then(function (reg) {
      return reg.pushManager.getSubscription();
    })]).then(function (_ref) {
      var api = _ref[0],
          subs = _ref[1];

      return api.unregisterDevice().then(function () {
        return subs.unsubscribe();
      });
    });
  };

  PushwooshWorker.prototype.initApi = function initApi() {
    var _this3 = this;

    return Promise.all([_storage.keyValue.set(_constants.keyApplicationCode, this.applicationCode), _storage.keyValue.set(_constants.keyDefaultNotificationTitle, this.defaultNotificationTitle), _storage.keyValue.set(_constants.keyDefaultNotificationImage, this.defaultNotificationImage), _storage.keyValue.set(_constants.keyDefaultNotificationUrl, this.defaultNotificationUrl), _storage.keyValue.set(_constants.keyLanguage, navigator.language)]).then(function () {
      if (Notification.permission === 'denied') {
        var err = new _PushwooshError2.default('The user has blocked notifications.', _PushwooshError2.default.codes.userDenied);
        _this3.logger.error(err);
        throw err;
      }
      return navigator.serviceWorker.getRegistration();
    }).then(function (serviceWorkerRegistration) {
      if (!serviceWorkerRegistration) {
        var err = new _PushwooshError2.default('No serviceWorkerRegistration');
        _this3.logger.error(err);
        throw err;
      }
      if (_this3.workerSecondUrl && serviceWorkerRegistration.active) {
        return _storage.keyValue.get(_constants.keyWorkerSDKVersion).then(function (workerSDKVersion) {
          var curVersion = (0, _functions.getVersion)();
          _this3.logger.debug('workerSDKVersion===curVersion', workerSDKVersion, curVersion);
          if (workerSDKVersion !== curVersion) {
            _this3.logger.debug('re-register for new version');
            return _this3.registerSW(('' + serviceWorkerRegistration.active.scriptURL).indexOf(_this3.workerUrl) > -1);
          }
          return serviceWorkerRegistration;
        });
      }
      return serviceWorkerRegistration;
    }).then(function (serviceWorkerRegistration) {
      _this3.logger.debug('sw', serviceWorkerRegistration);
      return serviceWorkerRegistration.pushManager.getSubscription();
    }).then(function (subscription) {
      if (!subscription) {
        var err = new _PushwooshError2.default('No subscription');
        _this3.logger.error(err);
        throw err;
      }
      _this3.api = _API2.default.create(subscription, _this3.applicationCode, (0, _createDoApiXHR2.default)(_this3.pushwooshUrl, _this3.logger), navigator.language);
      return _this3.api;
    });
  };

  PushwooshWorker.prototype.getWorkerUrl = function getWorkerUrl(second) {
    return (second ? this.workerSecondUrl : this.workerUrl) + '?applicationCode=' + this.applicationCode;
  };

  PushwooshWorker.prototype.registerSW = function registerSW(second) {
    this.logger.debug('register worker', second);
    return navigator.serviceWorker.register(this.getWorkerUrl(second));
  };

  PushwooshWorker.prototype.subscribeForPushes = function subscribeForPushes(serviceWorkerRegistration) {
    var _this4 = this,
        tries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    if (!serviceWorkerRegistration.active && tries < 10) {
      this.logger.debug('waiting for active service worker', tries);
      var waitPromise = new Promise(function (resolve) {
        return setTimeout(resolve, 500);
      });
      return waitPromise.then(function () {
        return _this4.subscribeForPushes(serviceWorkerRegistration, tries + 1);
      });
    }
    return serviceWorkerRegistration.pushManager.getSubscription().then(function (subscription) {
      if (!subscription) {
        return serviceWorkerRegistration.pushManager.subscribe({
          userVisibleOnly: true
        });
      }
      return subscription;
    }).then(function () {
      return _this4.register();
    }).catch(function (e) {
      var err = void 0;
      if (Notification.permission === 'denied') {
        err = new _PushwooshError2.default('Permission for Notifications was denied.', _PushwooshError2.default.codes.userDenied);
      } else {
        err = 'Unable to subscribe to push: ' + e;
      }
      _this4.logger.error(err);
      throw err;
    });
  };

  PushwooshWorker.prototype.register = function register() {
    var _this5 = this;

    return this.initApi().then(function () {
      // eslint-disable-line consistent-return
      var api = _this5.api,
          keyWasRegisteredValue = api.hwid + '_' + (0, _functions.getVersion)();
      if (localStorage.getItem(_constants.keyWasRegistered) !== keyWasRegisteredValue) {
        localStorage.setItem(_constants.keyWasRegistered, keyWasRegisteredValue);
        return api.registerDevice();
      }
    });
  };

  return PushwooshWorker;
}(_BaseInit3.default);

exports.default = PushwooshWorker;