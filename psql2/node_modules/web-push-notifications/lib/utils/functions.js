'use strict';

exports.__esModule = true;
exports.getGlobal = getGlobal;
exports.getVersion = getVersion;
exports.isSafariBrowser = isSafariBrowser;
exports.canUseServiceWorkers = canUseServiceWorkers;
exports.getBrowserType = getBrowserType;
exports.getBrowserVersion = getBrowserVersion;
exports.getDeviceName = getDeviceName;
exports.createUUID = createUUID;
exports.getPushToken = getPushToken;
exports.generateHwid = generateHwid;
exports.getAuthToken = getAuthToken;
exports.getPublicKey = getPublicKey;
exports.getPushwooshUrl = getPushwooshUrl;
function getGlobal() {
  return Function('return this')(); // eslint-disable-line no-new-func
}

function getVersion() {
  return '2.10.0';
}

function isSafariBrowser() {
  return typeof safari !== 'undefined' && navigator.userAgent.indexOf('Safari') > -1;
}

function canUseServiceWorkers() {
  return navigator && navigator.serviceWorker && 'showNotification' in ServiceWorkerRegistration.prototype && 'PushManager' in window;
}

function getBrowserType() {
  if (isSafariBrowser()) {
    return 10;
  }
  return navigator.userAgent.toLowerCase().indexOf('firefox') > -1 ? 12 : 11;
}

function getBrowserVersion() {
  var ua = navigator.userAgent,
      tem = void 0,
      M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];


  if (/trident/i.test(M[1])) {
    tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
    return 'IE ' + (tem[1] || '');
  }

  if (M[1] === 'Chrome') {
    tem = ua.match(/\bOPR\/(\d+)/);
    if (tem != null) {
      return 'Opera ' + tem[1];
    }
  }

  M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
  tem = ua.match(/version\/([.\d]+)/i);
  if (tem != null) {
    M.splice(1, 1, tem[1]);
  }

  return M.join(' ');
}

function getDeviceName() {
  var userAgent = navigator.userAgent;
  if (userAgent.match(/Android/i) || userAgent.match(/webOS/i) || userAgent.match(/iPhone/i) || userAgent.match(/iPad/i) || userAgent.match(/iPod/i) || userAgent.match(/BlackBerry/i) || userAgent.match(/Windows Phone/i)) {
    return 'Phone';
  }
  return 'PC';
}

function createUUID(pushToken) {
  var hexDigits = '0123456789abcdef',
      s = [];

  for (var i = 0; i < 32; i++) {
    var charCode = '0';
    if (pushToken.length - i - 1 >= 0) {
      charCode = pushToken.charCodeAt(pushToken.length - i - 1);
    }

    s[i] = hexDigits.substr(charCode % hexDigits.length, 1);
  }
  return s.join('');
}

function getPushToken(pushSubscription) {
  if (pushSubscription.subscriptionId) {
    return pushSubscription.subscriptionId;
  }

  if (getBrowserType() === 12) {
    return pushSubscription.endpoint;
  }

  return pushSubscription.endpoint.split('/').pop();
}

function generateHwid(applicationCode, pushToken) {
  return applicationCode + '_' + createUUID(pushToken);
}

function getSubsKey(pushSubscription, key) {
  var rawKey = pushSubscription.getKey && pushSubscription.getKey(key);
  return rawKey ? btoa(String.fromCharCode.apply(String, new Uint8Array(rawKey))) : '';
}

function getAuthToken(pushSubscription) {
  return getSubsKey(pushSubscription, 'auth');
}

function getPublicKey(pushSubscription) {
  return getSubsKey(pushSubscription, 'p256dh');
}

function getPushwooshUrl(applicationCode) {
  var subDomain = 'cp';
  if (!isSafariBrowser() && applicationCode && !~applicationCode.indexOf('.')) {
    subDomain = applicationCode + '.api';
  }
  return 'https://' + subDomain + '.pushwoosh.com/json/1.3/';
}