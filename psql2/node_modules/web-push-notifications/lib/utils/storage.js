'use strict';

exports.__esModule = true;

var instance = void 0;

function getInstance() {
  return new Promise(function (resolve, reject) {
    if (instance) {
      resolve(instance);
    } else {
      var request = indexedDB.open('PUSHWOOSH_SDK_STORE', 2);
      request.onsuccess = function (event) {
        var database = event.target.result;
        if (instance) {
          database.close();
          resolve(instance);
        } else {
          instance = database;
          resolve(database);
        }
      };
      request.onerror = function (event) {
        reject(event);
      };
      request.onupgradeneeded = function (event) {
        var database = event.target.result;
        database.createObjectStore('keyValue', {
          keyPath: 'key'
        });
      };
      request.onversionchange = function (event) {
        console.info('The database is about to be deleted.', event); // eslint-disable-line
      };
    }
  });
}

function createKeyValue(name) {
  return {
    get: function get(key) {
      return getInstance().then(function (database) {
        return new Promise(function (resolve, reject) {
          var request = database.transaction(name).objectStore(name).get(key);
          request.onsuccess = function () {
            var result = request.result;

            resolve(result && result.value);
          };
          request.onerror = function () {
            reject(request.errorCode);
          };
        });
      });
    },
    getAll: function getAll() {
      return getInstance().then(function (database) {
        return new Promise(function (resolve, reject) {
          var result = {},
              cursor = database.transaction(name).objectStore(name).openCursor();

          cursor.onsuccess = function (event) {
            var cursorResult = event.target.result;
            if (cursorResult) {
              result[cursorResult.key] = cursorResult.value.value;
              cursorResult.continue();
            } else {
              resolve(result);
            }
          };
          cursor.onerror = function () {
            reject(cursor.errorCode);
          };
        });
      });
    },
    set: function set(key, value) {
      return getInstance().then(function (database) {
        return new Promise(function (resolve, reject) {
          var request = database.transaction([name], 'readwrite').objectStore(name).put({ key: key, value: value });
          request.onsuccess = function () {
            resolve(key);
          };
          request.onerror = function (e) {
            reject(e);
          };
        });
      });
    }
  };
}

var keyValue = exports.keyValue = createKeyValue('keyValue');