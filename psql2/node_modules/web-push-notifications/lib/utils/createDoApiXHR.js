'use strict';

exports.__esModule = true;
exports.default = createDoApiXHR;

var _PushwooshError = require('../classes/PushwooshError'),
    _PushwooshError2 = _interopRequireDefault(_PushwooshError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createDoApiXHR(pushwooshUrl, logger) {
  return function doApiXHR(methodName, request) {
    logger.debug('Performing ' + methodName + ' call to Pushwoosh with arguments: ' + JSON.stringify(request));
    return new Promise(function (resolve, reject) {
      try {
        var xhr = new XMLHttpRequest(),
            url = pushwooshUrl + methodName,
            params = { request: request };


        xhr.open('POST', url, true);
        xhr.setRequestHeader('Content-Type', 'text/plain;charset=UTF-8');
        xhr.onload = function xhrOnLoad() {
          if (this.status == 200) {
            // eslint-disable-line eqeqeq
            var response = JSON.parse(this.responseText);
            if (response.status_code == 200) {
              // eslint-disable-line eqeqeq
              logger.debug(methodName + ' call to Pushwoosh has been successful');
              resolve(response.response);
            } else {
              var logText = new _PushwooshError2.default('Error occurred during the ' + methodName + ' call to Pushwoosh: ' + response.status_message);
              logger.error(logText);
              reject(logText);
            }
          } else {
            var _logText = new _PushwooshError2.default('Error occurred, status code: ' + this.status);
            logger.error(_logText);
            reject(_logText);
          }
        };
        xhr.onerror = function xhrOnError(e) {
          var logText = new _PushwooshError2.default('Pushwoosh response to ' + methodName + ' call in not ok: ' + e);
          logger.error(logText);
          reject(logText);
        };
        xhr.send(JSON.stringify(params));
      } catch (e) {
        var logText = new _PushwooshError2.default('Exception while ' + methodName + ' the device: ' + e);
        logger.error(logText);
        reject(logText);
      }
    });
  };
}